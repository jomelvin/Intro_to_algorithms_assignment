A[] = 13 19 9 5 12 8 7 4 21 2 6 11
p = first element index
r = last element index
i = p-1
j=p

## Partition logic for divide and conquer enablement for Qucik sort to recursively solve
for j=p upto j=r-1
 if A[j] <= A[r]
    i=i+1
    swap A[i] witj A[j]

swap A[i+1] with A[r]
return i+1 

This index returned from the partition subroutine will act as the new start and end point reference for the Quick Sort Recursive function call


### Quick Sort subroutine

if p < r

    #call partition subroutine with A[] p and r
    i+1 is returned from partition subroutine

    q = Partition A[] p and r

    #Recursive calling of Quick sort subroutine
    
    Quick Sort A[] p and q-1
    Quick Sort A[] q+1 and r

  Solution to Q 7.1-1
*******************************************************************************

  i pj                         r
    13 19 9 5 12 8 7 4 21 2 6 11
  i p  j                       r
    13 19 9 5 12 8 7 4 21 2 6 11
  i p     j                    r
    13 19 9 5 12 8 7 4 21 2 6 11     /* conditon is met and the A[i] and A[j] are swapped in the next row */
    ip      j                  r
    9 19 13 5 12 8 7 4 21 2 6 11
    p i       j                r
    9 5 13 19 12 8 7 4 21 2 6 11
    p i          j             r
    9 5 13 19 12 8 7 4 21 2 6 11
    p   i          j           r 
    9 5 8 19 12 13 7 4 21 2 6 11
    p     i          j         r 
    9 5 8 7 12 13 19 4 21 2 6 11
    p       i          j       r  
    9 5 8 7 4 13 19 12 21 2 6 11
    p       i             j    r
    9 5 8 7 4 13 19 12 21 2 6 11
    p         i             j  r
    9 5 8 7 4 2 19 12 21 13 6 11
    p           i             jr
    9 5 8 7 4 2 6 12 21 13 19 11  /* The for loop terminates as j is now equal to r*/

    9 5 8 7 4 2 6 11 21 13 19 12   /* Exchanging A[i+1] and A[r]. At this stage A[r] has been placed in its correct sorted position */

    ******************************************************************************************************************************

    Solution to Q 7.1.2

    J will be equal to r in case all the elements are identical
    Count the number of instances A[j] == A[r]
    If it is equal to r then return   (i+1 / 2). This gives the middle index position of the array